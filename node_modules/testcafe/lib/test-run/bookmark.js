"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const phase_1 = __importDefault(require("../test-run/phase"));
const types_1 = require("../errors/types");
const testcafe_hammerhead_1 = require("testcafe-hammerhead");
const actions_1 = require("./commands/actions");
const test_run_1 = require("../errors/test-run");
class TestRunBookmark {
    constructor(testRun, role) {
        this.testRun = testRun;
        this.role = role;
        this.url = testcafe_hammerhead_1.SPECIAL_BLANK_PAGE;
        this.dialogHandler = testRun.activeDialogHandler;
        this.iframeSelector = testRun.activeIframeSelector;
        this.speed = testRun.speed;
        this.pageLoadTimeout = testRun.pageLoadTimeout;
        this.ctx = testRun.ctx;
        this.fixtureCtx = testRun.fixtureCtx;
        this.consoleMessages = testRun.consoleMessages;
    }
    async init() {
        if (this.testRun.activeIframeSelector)
            await this.testRun.executeCommand(new actions_1.SwitchToMainWindowCommand());
        if (!this.role.opts.preserveUrl)
            await this.role.setCurrentUrlAsRedirectUrl(this.testRun);
    }
    async _restoreDialogHandler() {
        if (this.testRun.activeDialogHandler !== this.dialogHandler) {
            const restoreDialogCommand = new actions_1.SetNativeDialogHandlerCommand({ dialogHandler: { fn: this.dialogHandler } });
            await this.testRun.executeCommand(restoreDialogCommand);
        }
    }
    async _restoreSpeed() {
        if (this.testRun.speed !== this.speed) {
            const restoreSpeedCommand = new actions_1.SetTestSpeedCommand({ speed: this.speed });
            await this.testRun.executeCommand(restoreSpeedCommand);
        }
    }
    async _restorePageLoadTimeout() {
        if (this.testRun.pageLoadTimeout !== this.pageLoadTimeout) {
            const restorePageLoadTimeoutCommand = new actions_1.SetPageLoadTimeoutCommand({ duration: this.pageLoadTimeout });
            await this.testRun.executeCommand(restorePageLoadTimeoutCommand);
        }
    }
    async _restoreWorkingFrame() {
        if (this.testRun.activeIframeSelector !== this.iframeSelector) {
            const switchWorkingFrameCommand = this.iframeSelector ?
                new actions_1.SwitchToIframeCommand({ selector: this.iframeSelector }) :
                new actions_1.SwitchToMainWindowCommand();
            try {
                await this.testRun.executeCommand(switchWorkingFrameCommand);
            }
            catch (err) {
                if (err.code === types_1.TEST_RUN_ERRORS.actionElementNotFoundError)
                    throw new test_run_1.CurrentIframeNotFoundError();
                if (err.code === types_1.TEST_RUN_ERRORS.actionIframeIsNotLoadedError)
                    throw new test_run_1.CurrentIframeIsNotLoadedError();
                throw err;
            }
        }
    }
    async _restorePage(url, stateSnapshot) {
        await this.testRun.navigateToUrl(url, true, JSON.stringify(stateSnapshot));
    }
    async restore(callsite, stateSnapshot) {
        const prevPhase = this.testRun.phase;
        this.testRun.phase = phase_1.default.inBookmarkRestore;
        this.testRun.ctx = this.ctx;
        this.testRun.fixtureCtx = this.fixtureCtx;
        this.testRun.consoleMessages = this.consoleMessages;
        try {
            await this._restoreSpeed();
            await this._restorePageLoadTimeout();
            await this._restoreDialogHandler();
            const preserveUrl = this.role.opts.preserveUrl;
            await this._restorePage(this.role.redirectUrl, stateSnapshot);
            if (!preserveUrl)
                await this._restoreWorkingFrame();
        }
        catch (err) {
            err.callsite = callsite;
            throw err;
        }
        this.testRun.phase = prevPhase;
    }
}
exports.default = TestRunBookmark;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,